wplayzone = '9735ac'
gplayzone = 'f0611d'
ts = { whitecitieskilledbyvolfy = 0,
greencitieskilledbyvolfy = 0,
whitewondercardsbought = 0,
greenwondercardsbought = 0,
removedcards = 0}
mains = {
    White = getObjectFromGUID('abbb3c'), Green = getObjectFromGUID('695488'), Yellow = getObjectFromGUID('d1bb6c'), Blue = getObjectFromGUID('71f051')  }

function onload()

    -- assetSpread = getObjectFromGUID('7e4572')
    --
    -- assetSpread.call('shuffleDeck')
    -- assetSpread.call("clickrefillassets")
    volfypos = getObjectFromGUID('e5f881').getPosition()
    mains = { White = getObjectFromGUID('abbb3c'), Green = getObjectFromGUID('695488'), Yellow = getObjectFromGUID('d1bb6c'), Blue = getObjectFromGUID('71f051')  }
    log(mains)
    log(Turns.getPreviousTurnColor())

    createWonderButtons()
end

function onPlayerTurn(player)
    --print(player.color)
    onPlayerEndTurn(player.color)
end

function onPlayerEndTurn(color)

    assetSpread = getObjectFromGUID('7e4572')
    lair = getObjectFromGUID("8d18a4")

    assetSpread.call("clickrefillassets")

    -- trash cards
    lair.call("refillWonders")


    -- discard
    if(color == 'White') then
        discardbtn = getObjectFromGUID("5a6b5b")
        maindeck = getObjectFromGUID("abbb3c")
    else
        discardbtn = getObjectFromGUID("d5ae5a")
        maindeck = getObjectFromGUID("695488")
    end

        -- discardbtn.call("clickdiscard")
    discardmain = mains[Turns.getPreviousTurnColor()]
    discardmain.call("discard")
    greendeck = getObjectFromGUID("abbb3c")
    whitedeck = getObjectFromGUID("695488")
    greendeck.call("cleanup")
    whitedeck.call("cleanup")

    -- check volfy
    volfycheck(color)

end

function getLastMain()
    return 0
end

function tallytrash()
    --{-12.888,2.452,9.465}
    trashcards = findObjectsAtPosition({-12.888,2.452,9.465})

    if(#trashcards > 0) then
        ts.removedcards =  #trashcards[1].getObjects()
    end
end


function tallydecks()
    -- discard
    wdcard = getObjectFromGUID('d5ae5a')
    gdcard = getObjectFromGUID('5a6b5b')
    wmain = getObjectFromGUID('abbb3c')
    gmain = getObjectFromGUID('695488')

    wdcard.call("clickdiscard")
    gdcard.call("clickdiscard")
    -- refill
    wmain.call("click_refillDeck")
    gmain.call("click_refillDeck")

    -- count
    ts.wdeckcount = wmain.call("countDeck")
    ts.gdeckcount = gmain.call("countDeck")

    cardcolors = {'W','G','R','P'}
    ts.wcardsbought = "";
    ts.gcardsbought = "";
    for _, obj in ipairs(cardcolors) do
        if(ts["White" .. obj] == nil) then ts["White" .. obj] = 0 end
        if(ts["Green" .. obj] == nil) then ts["Green" .. obj] = 0 end
        ts.wcardsbought = ts.wcardsbought .. obj .. ":" .. ts["White" .. obj] .. ","
        ts.gcardsbought = ts.gcardsbought .. obj .. ":" .. ts["Green" .. obj] .. ","
    end
end

function volfycheck(nextplayer)
    volfy = getObjectFromGUID('e5f881')

    cards = findObjectsAtPosition(volfy.getPosition())

    if(#cards > 0) then
        if((volfy.getPosition().z > 0 and nextplayer == "White") or (volfy.getPosition().z < 0 and nextplayer == "Green")) then

            for _, obj in ipairs(cards) do
                obj.flip()
            end

            if(volfy.getPosition().z > 0 ) then
                ts.greencitieskilledbyvolfy = ts.greencitieskilledbyvolfy + 1
            else
                ts.whitecitieskilledbyvolfy = ts.whitecitieskilledbyvolfy + 1
            end


            volfy.setPositionSmooth(volfypos, false, false)

        end

    end

end

function tally()

    notebook = getObjectFromGUID("14d08d")
    -- count dead cities
    whiteobjs = getObjectFromGUID(wplayzone).getObjects()
    grnobjs = getObjectFromGUID(gplayzone).getObjects()


    -- print("white lost " .. getDestroyedCitiesCount(whiteobjs) .. " cities")
    -- print("green lost " .. getDestroyedCitiesCount(grnobjs) .. " cities")

    ts.whitecitiesdestroyed = getDestroyedCitiesCount(whiteobjs)
    ts.greencitiesdestroyed = getDestroyedCitiesCount(grnobjs)
    -- count trash
    tallytrash()

    -- count decks
    tallydecks()
    if(ts.whitecitiesdestroyed > ts.greencitiesdestroyed) then ts.winner = "Green (P2)" else ts.winner = "White(P1)" end
    ts.time = getObjectFromGUID('bff079').getValue() / 60
    ts.secs = getObjectFromGUID('bff079').getValue() % 60
    notebook.setDescription(ts.winner .. " wins. Game took " .. math.floor(ts.time) .. 'm' .. ts.secs ..  's\n\r'
    .."P1 lost " .. ts.whitecitiesdestroyed .. " cities," .. ts.whitecitieskilledbyvolfy .. " cities to Volfyirion" .. '\n\r'
    .. "P1 bought " .. ts.whitewondercardsbought .. " wonders  & " .. ts.wcardsbought .. 'cards\n\r'
    .. "P1 has " .. ts.wdeckcount .. " cards left in the deck" .. '\n\r'

    .. "P2 lost " .. ts.greencitiesdestroyed .. " cities,"  .. ts.greencitieskilledbyvolfy .. " cities to Volfyirion" .. '\n\r'
    .. "P2 bought " .. ts.greenwondercardsbought .. " wonders & " .. ts.gcardsbought .. 'cards\n\r'
    .. "P2 has " .. ts.gdeckcount .. "  cards left in the deck" .. '\n\r'

    .. "removed cards " .. ts.removedcards  )

end

function getDestroyedCitiesCount(objs)
    local count = 0
    for _, obj in ipairs(objs) do
        if  obj.name == "Card" and (obj.getName() == 'City' or obj.getName() == 'Lair') then
            local desc = obj.getDescription()

            if(isFlipped(obj) == true) then
                count = count + 1
            end

        end

    end
    return count

end

function isFlipped(card)
    --print(y >= -5 and y <=5)
    -- print(y >= 85 and y <=95) tapped
    --print(y >= 175 and y <= 185)
    -- print(y >= 265 and y <= 275) tapped
    local y = card.getRotation().z

    return (y > 175 and y < 185)
end




function findObjectsAtPosition(localPos)

    --We convert that local position to a global table position
    local globalPos = self.positionToWorld(localPos)
    --We then do a raycast of a sphere on that position to find objects there
    --It returns a list of hits which includes references to what it hit
    local objList = Physics.cast({
        origin=localPos, --Where the cast takes place
        direction={0,1,0}, --Which direction it moves (up is shown)
        type=2, --Type. 2 is "sphere"
        size={2,2,2}, --How large that sphere is
        max_distance=1, --How far it moves. Just a little bit
        debug=true --If it displays the sphere when casting.
    })

    --Now we have objList which contains any and all objects in that area.
    --But we only want decks and cards. So we will create a new list
    local decksAndCardses = {}

    --Then go through objList adding any decks/cards to our new list
    for _, obj in ipairs(objList) do

         if obj.hit_object.tag == "Deck" or obj.hit_object.tag == "Card" then
             table.insert(decksAndCardses, obj.hit_object)
         end
    end

    --Now we return this to where it was called with the information
    return decksAndCardses
end

function findObjectsAtPositionPrecise(params)

        --We convert that local position to a global table position
        local globalPos = params[1]
        --We then do a raycast of a sphere on that position to find objects there
        --It returns a list of hits which includes references to what it hit
        local objList = Physics.cast({
            origin=params[1], --Where the cast takes place
            direction={0,1,0}, --Which direction it moves (up is shown)
            type=2, --Type. 2 is "sphere"
            size={params[2],params[2],params[2]}, --How large that sphere is
            max_distance=1, --How far it moves. Just a little bit
            debug=true --If it displays the sphere when casting.
        })

        --Now we have objList which contains any and all objects in that area.
        --But we only want decks and cards. So we will create a new list
        local decksAndCardses = {}

        --Then go through objList adding any decks/cards to our new list
        for _, obj in ipairs(objList) do

             if obj.hit_object.tag == "Deck" or obj.hit_object.tag == "Card" then
                 table.insert(decksAndCardses, obj.hit_object)
             end
        end

        --Now we return this to where it was called with the information
        return decksAndCardses
end

function findObjectsAtPosition(localPos)
    return findObjectsAtPositionPrecise({localPos,2})
end

function addBoughtWonder(player)
    if(player == 'White') then
        ts.whitewondercardsbought = ts.whitewondercardsbought + 1
    else
        ts.greenwondercardsbought = ts.greenwondercardsbought + 1
    end

end

function createWonderButtons()
    --log(getObjectFromGUID('6b79e6').getPosition()) --{-8.635, 2.452,-2.387 }
    whiteX = {-8.635, 2.452,-2.387 }
    interval = 3.349

    for i=1,6,1 do

    end
end

function dump(o)
   if type(o) == 'table' then

      local s = '{ '
      for k,v in pairs(o) do
         if type(k) ~= 'number' then k = '"'..k..'"' end
         s = s .. '['..k..'] = ' .. dump(v) .. ','
      end
      return s .. '} '
   else
      return tostring(o)
   end
end

function tallycard(params)

    if(ts[params.player .. params.color] == nil) then ts[params.player .. params.color] = 0 end
    ts[params.player .. params.color] = ts[params.player .. params.color] + 1
end